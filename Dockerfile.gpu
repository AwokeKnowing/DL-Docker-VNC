FROM nvidia/cuda:8.0-cudnn5-devel-ubuntu16.04

MAINTAINER Kai-Yang Hsieh <b03611041@ntu.edu.tw>

ARG THEANO_VERSION=rel-0.9.0rc2
ARG TENSORFLOW_VERSION=1.0.0
ARG TENSORFLOW_ARCH=gpu
ARG KERAS_VERSION=1.2.2
ARG CAFFE_VERSION=master

#RUN echo -e "\n**********************\nNVIDIA Driver Version\n**********************\n" && \
#	cat /proc/driver/nvidia/version && \
#	echo -e "\n**********************\nCUDA Version\n**********************\n" && \
#	nvcc -V && \
#	echo -e "\n\nBuilding your Deep Learning Docker Image...\n"

# Install some dependencies
RUN apt-get update && apt-get install -y \
		bc \
		build-essential \
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libpng12-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		python-dev \
		software-properties-common \
		unzip \
		vim \
		wget \
		zlib1g-dev \
		qt5-default \
		libvtk6-dev \
		zlib1g-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libjasper-dev \
		libopenexr-dev \
		libgdal-dev \
		libdc1394-22-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		yasm \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libxine2-dev \
		libtbb-dev \
		libeigen3-dev \
		python-dev \
		python-tk \
		python-numpy \
		python3-dev \
		python3-tk \
		python3-numpy \
		ant \
		default-jdk \
		doxygen \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/* && \
# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
	update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3

# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python get-pip.py && \
	rm get-pip.py

# Add SNI support to Python
RUN pip --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1

# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary
# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)

RUN apt-get update && apt-get install -y \
		python-numpy \
		python-scipy \
		python-nose \
		python-h5py \
		python-skimage \
		python-matplotlib \
		python-pandas \
		python-sklearn \
		python-sympy \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# Install other useful Python packages using pip
RUN pip --no-cache-dir install --upgrade ipython && \
	pip --no-cache-dir install \
		cython \
		ipykernel \
		jupyter \
		path.py \
		Pillow \
		pygments \
		six \
		sphinx \
		wheel \
		zmq \
		protobuf \
		&& \
	python -m ipykernel.kernelspec


# Install TensorFlow
RUN pip --no-cache-dir install \
	https://storage.googleapis.com/tensorflow/linux/${TENSORFLOW_ARCH}/tensorflow_${TENSORFLOW_ARCH}-${TENSORFLOW_VERSION}-cp27-none-linux_x86_64.whl


# Install dependencies for Caffe and pyCaffe
RUN apt-get update && apt-get install -y \
		libboost-all-dev \
		libgflags-dev \
		libgoogle-glog-dev \
		libhdf5-serial-dev \
		libleveldb-dev \
		liblmdb-dev \
		libopencv-dev \
		libprotobuf-dev \
		libsnappy-dev \
		protobuf-compiler \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

# Install Caffe
RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/BVLC/caffe.git /root/caffe && \
	cd /root/caffe && \
	cat python/requirements.txt | xargs -n1 pip install && \
	mkdir build && cd build && \
	cmake -DUSE_CUDNN=1 -DBLAS=Open .. && \
	make -j"$(nproc)" all && \
	make install && \
	make pycaffe

# Set up Caffe environment variables
ENV CAFFE_ROOT=/root/caffe
ENV PYCAFFE_ROOT=$CAFFE_ROOT/python
ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
	PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH

RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig

# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS
RUN pip --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \
	\
	echo "[global]\ndevice=gpu\nfloatX=float32\noptimizer_including=cudnn\nmode=FAST_RUN \
		\n[lib]\ncnmem=0.95 \
		\n[nvcc]\nfastmath=True \
		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
		\n[DebugMode]\ncheck_finite=1" \
	> /root/.theanorc


# Install Keras
RUN pip --no-cache-dir install keras

# Install OpenCV
RUN git clone --depth 1 https://github.com/opencv/opencv.git /root/opencv && \
	cd /root/opencv && \
	mkdir build && \
	cd build && \
	cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON .. && \
	make -j"$(nproc)"  && \
	make install && \
	ldconfig && \
	echo 'ln /dev/null /dev/raw1394' >> ~/.bashrc

COPY keyboard /etc/default/

RUN add-apt-repository ppa:mystic-mirage/pycharm && add-apt-repository ppa:webupd8team/sublime-text-3

#install some dependencies and vncserver
RUN apt-get update && apt-get install -y --no-install-recommends \
		ubuntu-desktop \
		gnome-panel \
		gnome-settings-daemon \
		metacity \
		nautilus \
		gnome-terminal

RUN DEBIAN_FRONTEND=noninteractive apt-get install -y \
		vnc4server \
		chromium-browser \
		autocutsel \
		sudo \
		ttf-wqy-zenhei \
		pycharm-community \
		leafpad \
		sublime-text-installer \
		okular \
		p7zip-full \
		file-roller \
		eclipse \
		gpicview \
		qt5-default \
		&& \
        apt-get clean && \
        apt-get autoremove && \
        rm -rf /var/lib/apt/lists/*

#instal gitKraken
RUN wget https://release.gitkraken.com/linux/gitkraken-amd64.deb
RUN dpkg -i gitkraken-amd64.deb
RUN rm -f gitkraken-amd64.deb

#set the locale
RUN locale-gen en_US.UTF-8
RUN update-locale LANG=en_US.utf8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

#add user ubuntu 
RUN useradd -ms /bin/bash ubuntu && echo "ubuntu:ubuntu" | chpasswd \
	&& adduser ubuntu sudo

#set vnc environment
RUN mkdir /home/ubuntu/.vnc 
COPY .vnc /home/ubuntu/.vnc
RUN chmod 600 /home/ubuntu/.vnc/passwd
RUN chmod +x /home/ubuntu/.vnc/xstartup
RUN chown -R ubuntu /home/ubuntu/.vnc
RUN chgrp -R ubuntu /home/ubuntu/.vnc

# Set up notebook config
COPY jupyter_notebook_config.py /home/ubuntu/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /ubuntu/

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888 5900

RUN mkdir /home/ubuntu/files
RUN chown -R ubuntu /home/ubuntu/files
RUN chgrp -R ubuntu /home/ubuntu/files

COPY startup.sh /opt/
RUN chmod +x /opt/startup.sh
RUN chown ubuntu /opt/startup.sh
RUN chgrp ubuntu /opt/startup.sh
RUN chown -R ubuntu /tmp

USER ubuntu
RUN mkdir /home/ubuntu/nas
RUN mkdir /home/ubuntu/shared
ENV HOME /home/ubuntu
WORKDIR "/home/ubuntu/files"
